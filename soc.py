#!/usr/bin/env python3
"""
SOC Telegram Bot - Simple single script version
Run: python3 bot_interactive.py

Set environment variables:
export TELEGRAM_TOKEN="your_token"
export VIRUSTOTAL_API_KEY="your_key"
export ABUSEIPDB_API_KEY="your_key"
export OWNER_ID="your_telegram_id"
"""

import logging
import os
import json
import asyncio
import aiohttp
import whois
import ipaddress
import re
import pickle
import os.path
import getpass
from datetime import datetime
from threading import Lock
from typing import Optional, Dict, Any
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

def setup_credentials():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    config_file = ".bot_config.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞
    env_config = {}
    if os.getenv('VIRUSTOTAL_API_KEY'):
        env_config['VIRUSTOTAL_API_KEY'] = os.getenv('VIRUSTOTAL_API_KEY')
    if os.getenv('ABUSEIPDB_API_KEY'):
        env_config['ABUSEIPDB_API_KEY'] = os.getenv('ABUSEIPDB_API_KEY')
    if os.getenv('TELEGRAM_TOKEN'):
        env_config['TELEGRAM_TOKEN'] = os.getenv('TELEGRAM_TOKEN')
    if os.getenv('OWNER_ID'):
        try:
            env_config['OWNER_ID'] = int(os.getenv('OWNER_ID'))
        except ValueError:
            pass
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if len(env_config) == 4:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return env_config
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
                print("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (tty)
                try:
                    import sys
                    if not sys.stdin.isatty():
                        print("ü§ñ –ó–∞–ø—É—Å–∫ –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥")
                        return config
                except:
                    return config
                
                try:
                    use_existing = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): ").lower().strip()
                    if use_existing in ['y', 'yes', '–¥–∞', '']:
                        return config
                except (EOFError, KeyboardInterrupt):
                    return config
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    try:
        import sys
        if not sys.stdin.isatty():
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("export TELEGRAM_TOKEN='your_bot_token'")
            print("export VIRUSTOTAL_API_KEY='your_vt_key'") 
            print("export ABUSEIPDB_API_KEY='your_abuse_key'")
            print("export OWNER_ID='your_telegram_id'")
            print("–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .bot_config.json —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
            return None
    except:
        print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ .bot_config.json")
        return None
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SOC Telegram Bot")
    print("=" * 50)
    
    config = {}
    
    # VirusTotal API Key
    print("\nüîç VirusTotal API Key:")
    print("–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://www.virustotal.com/gui/my-apikey")
    while True:
        try:
            vt_key = input("–í–≤–µ–¥–∏—Ç–µ VirusTotal API Key: ").strip()
            if len(vt_key) >= 64:  # VirusTotal keys are 64 chars
                config['VIRUSTOTAL_API_KEY'] = vt_key
                break
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 64 —Å–∏–º–≤–æ–ª–∞.")
        except (EOFError, KeyboardInterrupt):
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return None
    
    # AbuseIPDB API Key
    print("\nüõ°Ô∏è AbuseIPDB API Key:")
    print("–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://www.abuseipdb.com/api")
    while True:
        try:
            abuse_key = input("–í–≤–µ–¥–∏—Ç–µ AbuseIPDB API Key: ").strip()
            if len(abuse_key) >= 80:  # AbuseIPDB keys are 80 chars
                config['ABUSEIPDB_API_KEY'] = abuse_key
                break
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 80 —Å–∏–º–≤–æ–ª–æ–≤.")
        except (EOFError, KeyboardInterrupt):
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return None
    
    # Telegram Bot Token
    print("\nü§ñ Telegram Bot Token:")
    print("–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
    while True:
        try:
            tg_token = input("–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token: ").strip()
            if ':' in tg_token and len(tg_token.split(':')[1]) >= 30:
                config['TELEGRAM_TOKEN'] = tg_token
                break
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –§–æ—Ä–º–∞—Ç: 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11")
        except (EOFError, KeyboardInterrupt):
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return None
    
    # Owner ID
    print("\nüë§ Owner ID (–≤–∞—à Telegram ID):")
    print("–£–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —É @userinfobot –≤ Telegram")
    while True:
        try:
            owner_input = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram User ID: ").strip()
            owner_id = int(owner_input)
            if owner_id > 0:
                config['OWNER_ID'] = owner_id
                break
            else:
                print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        except (EOFError, KeyboardInterrupt):
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    try:
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")
        print("üîí –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ API –∫–ª—é—á–∏. –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∏–º!")
        
        # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists('.gitignore'):
            with open('.gitignore', 'w') as f:
                f.write(".bot_config.json\n*.pkl\n__pycache__/\n*.log\n")
            print("‚úÖ –°–æ–∑–¥–∞–Ω .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return None
    
    return config

# Global variables to be set after config loading
VIRUSTOTAL_API_KEY = None
ABUSEIPDB_API_KEY = None
TELEGRAM_TOKEN = None
OWNER_ID = None

# ======================
#   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
# ======================
ALLOWED_USERS_FILE = "allowed_users.pkl"
ALLOWED_USERS = []

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if os.path.exists(ALLOWED_USERS_FILE):
    try:
        with open(ALLOWED_USERS_FILE, "rb") as f:
            ALLOWED_USERS = pickle.load(f)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {ALLOWED_USERS}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# ======================
#   –ö—ç—à –¥–ª—è MITRE ATT&CK
# ======================
MITRE_CACHE_FILE = "mitre_cache.pkl"
mitre_cache_lock = Lock()
MITRE_CACHE = {
    "tactics": [],
    "techniques": [],
    "subtechniques": [],
    "last_update": None,
}

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à MITRE –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö)
if os.path.exists(MITRE_CACHE_FILE):
    try:
        os.remove(MITRE_CACHE_FILE)
        logging.info("–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à MITRE –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫—ç—à MITRE: {e}")

# ======================
#  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================

def sanitize_input(text: str, max_length: int = 200) -> str:
    """–°–∞–Ω–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not isinstance(text, str):
        return ""
    # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    sanitized = re.sub(r'[<>"\'\/\\]', '', text.strip())
    return sanitized[:max_length]

def validate_ip(ip_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞"""
    try:
        ipaddress.ip_address(ip_str)
        return True
    except ValueError:
        return False

def validate_domain(domain: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    domain_pattern = re.compile(
        r'^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+'  # –¥–æ–º–µ–Ω
        r'[a-zA-Z]{2,}$'  # TLD
    )
    return bool(domain_pattern.match(domain)) and len(domain) <= 253

def validate_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL"""
    url_pattern = re.compile(
        r'^https?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+'  # –¥–æ–º–µ–Ω
        r'(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # TLD
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
        r'(?::\d+)?'  # –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(url_pattern.match(url)) and len(url) <= 2000

def validate_hash(hash_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ö–µ—à–∞ (MD5, SHA1, SHA256)"""
    hash_patterns = {
        32: r'^[a-fA-F0-9]{32}$',  # MD5
        40: r'^[a-fA-F0-9]{40}$',  # SHA1
        64: r'^[a-fA-F0-9]{64}$'   # SHA256
    }
    hash_len = len(hash_str)
    if hash_len in hash_patterns:
        return bool(re.match(hash_patterns[hash_len], hash_str))
    return False

async def rate_limit_check(user_id: int, action: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ rate limiting (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)"""
    # –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Redis –∏–ª–∏ SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    return True

async def check_access(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."""
    user_id = update.effective_user.id
    logging.info(f"User {user_id} trying to access bot. Owner ID: {OWNER_ID}")
    
    if user_id != OWNER_ID and user_id not in ALLOWED_USERS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ
        await update.message.reply_text(
            f"‚õîÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º. –í–∞—à ID: {user_id}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return False
    return True

def save_allowed_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –≤ —Ñ–∞–π–ª."""
    try:
        with open(ALLOWED_USERS_FILE, "wb") as f:
            pickle.dump(ALLOWED_USERS, f)
            logging.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({len(ALLOWED_USERS)} –∑–∞–ø–∏—Å–µ–π).")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def save_mitre_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à MITRE –≤ —Ñ–∞–π–ª."""
    try:
        with mitre_cache_lock:
            with open(MITRE_CACHE_FILE, "wb") as f:
                pickle.dump(MITRE_CACHE, f)
                logging.info(
                    f"MITRE cache saved, tactics: {len(MITRE_CACHE['tactics'])}, techniques: {len(MITRE_CACHE['techniques'])}"
                )
    except Exception as e:
        logging.error(f"Error saving MITRE cache: {e}")

def get_tactics_for_technique(technique_obj):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–∫—Ç–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–∑ ATT&CK), –∫ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∞."""
    tactics = []
    for phase in technique_obj.get("kill_chain_phases", []):
        if phase.get("kill_chain_name") == "mitre-attack":
            tactics.append(phase.get("phase_name", ""))
    return tactics

def get_russian_name(name_en: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)."""
    # –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # –°–∞–Ω–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if not isinstance(name_en, str):
        return ""
    return name_en.strip()[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

async def fetch_mitre_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ MITRE ATT&CK —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥."""
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π)
    with mitre_cache_lock:
        if (MITRE_CACHE["last_update"] and 
            (now - MITRE_CACHE["last_update"]).days < 7 and 
            MITRE_CACHE["tactics"]):
            return MITRE_CACHE
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with mitre_cache_lock:
        MITRE_CACHE.update(get_comprehensive_mitre_data())
        MITRE_CACHE["last_update"] = now
    
    return MITRE_CACHE

def get_comprehensive_mitre_data():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MITRE ATT&CK."""
    return {
        "tactics": [
            {"id": "TA0001", "name": "Initial Access", "name_ru": "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ç–∏ –∂–µ—Ä—Ç–≤—ã."},
            {"id": "TA0002", "name": "Execution", "name_ru": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∂–µ—Ä—Ç–≤—ã."},
            {"id": "TA0003", "name": "Persistence", "name_ru": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ."},
            {"id": "TA0004", "name": "Privilege Escalation", "name_ru": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."},
            {"id": "TA0005", "name": "Defense Evasion", "name_ru": "–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏."},
            {"id": "TA0006", "name": "Credential Access", "name_ru": "–î–æ—Å—Ç—É–ø –∫ —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –∫—Ä–∞–∂–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."},
            {"id": "TA0007", "name": "Discovery", "name_ru": "–†–∞–∑–≤–µ–¥–∫–∞", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∏ —Å–µ—Ç–∏."},
            {"id": "TA0008", "name": "Lateral Movement", "name_ru": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Å–µ—Ç–∏ –∂–µ—Ä—Ç–≤—ã."},
            {"id": "TA0009", "name": "Collection", "name_ru": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞."},
            {"id": "TA0010", "name": "Command and Control", "name_ru": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ —Å–≤—è–∑–∏ —Å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏."},
            {"id": "TA0011", "name": "Exfiltration", "name_ru": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –∫—Ä–∞–∂–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç–∏ –∂–µ—Ä—Ç–≤—ã."},
            {"id": "TA0040", "name": "Impact", "name_ru": "–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ", 
             "description": "–¢–µ—Ö–Ω–∏–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º, –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–µ—Ç–∏."},
        ],
        "techniques": [
            {"id": "T1566", "name": "Phishing", "name_ru": "–§–∏—à–∏–Ω–≥", "tactics": ["initial-access"],
             "description": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–∞–º."},
            {"id": "T1059", "name": "Command and Scripting Interpreter", "name_ru": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã –∫–æ–º–∞–Ω–¥", "tactics": ["execution"],
             "description": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."},
            {"id": "T1053", "name": "Scheduled Task/Job", "name_ru": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", "tactics": ["execution", "persistence"],
             "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞."},
            {"id": "T1055", "name": "Process Injection", "name_ru": "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å", "tactics": ["defense-evasion", "privilege-escalation"],
             "description": "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."},
            {"id": "T1027", "name": "Obfuscated Files or Information", "name_ru": "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è", "tactics": ["defense-evasion"],
             "description": "–°–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞."},
            {"id": "T1003", "name": "OS Credential Dumping", "name_ru": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –û–°", "tactics": ["credential-access"],
             "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."},
            {"id": "T1082", "name": "System Information Discovery", "name_ru": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ", "tactics": ["discovery"],
             "description": "–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."},
            {"id": "T1021", "name": "Remote Services", "name_ru": "–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã", "tactics": ["lateral-movement"],
             "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ç–∏."},
            {"id": "T1005", "name": "Data from Local System", "name_ru": "–î–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", "tactics": ["collection"],
             "description": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∂–µ—Ä—Ç–≤—ã."},
            {"id": "T1071", "name": "Application Layer Protocol", "name_ru": "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è", "tactics": ["command-and-control"],
             "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–π —Å–≤—è–∑–∏."},
            {"id": "T1041", "name": "Exfiltration Over C2 Channel", "name_ru": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "tactics": ["exfiltration"],
             "description": "–ö—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."},
            {"id": "T1486", "name": "Data Encrypted for Impact", "name_ru": "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", "tactics": ["impact"],
             "description": "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."},
            {"id": "T1190", "name": "Exploit Public-Facing Application", "name_ru": "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "tactics": ["initial-access"],
             "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö."},
            {"id": "T1078", "name": "Valid Accounts", "name_ru": "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏", "tactics": ["defense-evasion", "persistence", "privilege-escalation", "initial-access"],
             "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."},
            {"id": "T1574", "name": "Hijack Execution Flow", "name_ru": "–ü–µ—Ä–µ—Ö–≤–∞—Ç –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "tactics": ["persistence", "privilege-escalation", "defense-evasion"],
             "description": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Å–∏—Å—Ç–µ–º–µ."},
        ],
        "subtechniques": [
            {"id": "T1566.001", "name": "Spearphishing Attachment", "parent": "T1566", "tactics": ["initial-access"],
             "description": "–§–∏—à–∏–Ω–≥ —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º –≤–ª–æ–∂–µ–Ω–∏–µ–º."},
            {"id": "T1566.002", "name": "Spearphishing Link", "parent": "T1566", "tactics": ["initial-access"],
             "description": "–§–∏—à–∏–Ω–≥ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Ä–µ—Å—É—Ä—Å."},
            {"id": "T1059.001", "name": "PowerShell", "parent": "T1059", "tactics": ["execution"],
             "description": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ PowerShell."},
            {"id": "T1059.003", "name": "Windows Command Shell", "parent": "T1059", "tactics": ["execution"],
             "description": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É Windows."},
            {"id": "T1055.001", "name": "Dynamic-link Library Injection", "parent": "T1055", "tactics": ["defense-evasion", "privilege-escalation"],
             "description": "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ DLL –≤ –ø—Ä–æ—Ü–µ—Å—Å—ã."},
        ],
        "last_update": datetime.now(),
    }

def get_fallback_mitre_data():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MITRE."""
    return get_comprehensive_mitre_data()

# ======================
#     –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# ======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if not await check_access(update):
        return
    user = update.effective_user
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_menu_buttons = [
        [KeyboardButton("–ê–Ω–∞–ª–∏–∑ IOC"), KeyboardButton("MITRE ATT&CK")],
        [KeyboardButton("–û–±—É—á–µ–Ω–∏–µ")],
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω–∫–∞" —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if user.id == OWNER_ID:
        main_menu_buttons[1].append(KeyboardButton("–ê–¥–º–∏–Ω–∫–∞"))
    reply_markup = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True)
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ SOC. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        f"üîç <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
        f"/ip [IP] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP-–∞–¥—Ä–µ—Å\n"
        f"/domain [–¥–æ–º–µ–Ω] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω\n"
        f"/url [URL] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL\n"
        f"/hash [hash] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—ç—à —Ñ–∞–π–ª–∞\n"
        f"/whois [–¥–æ–º–µ–Ω/IP] ‚Äì –ø–æ–ª—É—á–∏—Ç—å WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        f"üìö <b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:</b>\n"
        f"/mitre [–∑–∞–ø—Ä–æ—Å] ‚Äì –ø–æ–∏—Å–∫ –≤ MITRE ATT&CK\n"
        f"/killchain ‚Äì —Ñ–∞–∑—ã Cyber Kill Chain\n"
        f"/owasp ‚Äì OWASP Top 10\n"
        f"/osi ‚Äì –º–æ–¥–µ–ª—å OSI\n"
        f"/tcpip ‚Äì –º–æ–¥–µ–ª—å TCP/IP\n\n"
        f"üì∞ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/help ‚Äì —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        reply_markup=reply_markup,
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help: –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    if not await check_access(update):
        return
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é)\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ê–Ω–∞–ª–∏–∑ IOC:</b>\n"
        "/ip [IP] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é IP-–∞–¥—Ä–µ—Å–∞\n"
        "/domain [–¥–æ–º–µ–Ω] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –¥–æ–º–µ–Ω–∞\n"
        "/url [URL] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é URL\n"
        "/hash [hash] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—ç—à —Ñ–∞–π–ª–∞\n"
        "/whois [–¥–æ–º–µ–Ω/IP] ‚Äì –ø–æ–ª—É—á–∏—Ç—å WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        "<b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:</b>\n"
        "/mitre [—Ç–∞–∫—Ç–∏–∫–∞/—Ç–µ—Ö–Ω–∏–∫–∞/ID] ‚Äì –ø–æ–∏—Å–∫ –≤ MITRE ATT&CK\n"
        "/killchain ‚Äì —Ñ–∞–∑—ã Cyber Kill Chain\n"
        "/owasp ‚Äì OWASP Top 10 —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n"
        "/osi ‚Äì –º–æ–¥–µ–ª—å OSI\n"
        "/tcpip ‚Äì –º–æ–¥–µ–ª—å TCP/IP\n"
    )
    await update.message.reply_html(help_text)

# ======= –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ IOC (VirusTotal, AbuseIPDB, WHOIS) =======

async def check_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ip ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ AbuseIPDB –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ VirusTotal/Shodan."""
    if not await check_access(update):
        return
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å. –ü—Ä–∏–º–µ—Ä: /ip 8.8.8.8"
        )
        return
    
    ip = sanitize_input(context.args[0])
    if not validate_ip(ip):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
        )
        return
    
    if not await rate_limit_check(update.effective_user.id, "ip_check"):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        )
        return
        
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é IP-–∞–¥—Ä–µ—Å: {ip}...")
    try:
        url = "https://api.abuseipdb.com/api/v2/check"
        headers = {"Accept": "application/json", "Key": ABUSEIPDB_API_KEY}
        params = {"ipAddress": ip, "maxAgeInDays": "90"}
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data_json = await response.json()
                    data = data_json.get("data", {})
                    abuse_score = data.get("abuseConfidenceScore", 0)
                    country = data.get("countryCode", "Unknown")
                    isp = data.get("isp", "Unknown")
                    usage_type = data.get("usageType", "Unknown")
                    total_reports = data.get("totalReports", 0)
                    last_reported = data.get("lastReportedAt", "Never")
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ abuse score
                    risk_level = "–ù–∏–∑–∫–∏–π üü¢"
                    if abuse_score > 80:
                        risk_level = "–í—ã—Å–æ–∫–∏–π üî¥"
                    elif abuse_score > 30:
                        risk_level = "–°—Ä–µ–¥–Ω–∏–π üü†"
                    message = (
                        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: {ip}</b>\n\n"
                        f"üîπ <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({abuse_score}%)\n"
                        f"üîπ <b>–°—Ç—Ä–∞–Ω–∞:</b> {country}\n"
                        f"üîπ <b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {isp}\n"
                        f"üîπ <b>–¢–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> {usage_type}\n"
                        f"üîπ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±:</b> {total_reports}\n"
                        f"üîπ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∂–∞–ª–æ–±–∞:</b> {last_reported}\n\n"
                    )
                    # –ö–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ VirusTotal, AbuseIPDB, Shodan
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "VirusTotal",
                                url=f"https://www.virustotal.com/gui/ip-address/{ip}",
                            ),
                            InlineKeyboardButton(
                                "AbuseIPDB", url=f"https://www.abuseipdb.com/check/{ip}"
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                "Shodan", url=f"https://www.shodan.io/host/{ip}"
                            )
                        ],
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_html(message, reply_markup=reply_markup)
                else:
                    logging.error(f"AbuseIPDB API error: {response.status}")
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP: {response.status}"
                    )
    except asyncio.TimeoutError:
        logging.error(f"Timeout during IP check for user {update.effective_user.id}")
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error in IP check: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_domain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /domain ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ VirusTotal."""
    if not await check_access(update):
        return
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω. –ü—Ä–∏–º–µ—Ä: /domain example.com"
        )
        return
    
    domain = sanitize_input(context.args[0]).lower()
    if not validate_domain(domain):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
        )
        return
    
    if not await rate_limit_check(update.effective_user.id, "domain_check"):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        )
        return
        
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ–º–µ–Ω: {domain}...")
    try:
        url = f"https://www.virustotal.com/api/v3/domains/{domain}"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data_json = await response.json()
                    data = data_json.get("data", {}).get("attributes", {})
                    stats = data.get("last_analysis_stats", {})
                    malicious = stats.get("malicious", 0)
                    suspicious = stats.get("suspicious", 0)
                    harmless = stats.get("harmless", 0)
                    undetected = stats.get("undetected", 0)
                    total = malicious + suspicious + harmless + undetected
                    risk_score = (malicious + suspicious) / total * 100 if total > 0 else 0
                    risk_level = "–ù–∏–∑–∫–∏–π üü¢"
                    if risk_score > 50:
                        risk_level = "–í—ã—Å–æ–∫–∏–π üî¥"
                    elif risk_score > 20:
                        risk_level = "–°—Ä–µ–¥–Ω–∏–π üü†"
                    creation_date = data.get("creation_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    if isinstance(creation_date, int):
                        creation_date = datetime.fromtimestamp(creation_date).strftime(
                            "%Y-%m-%d"
                        )
                    message = (
                        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞: {domain}</b>\n\n"
                        f"üîπ <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({risk_score:.1f}%)\n"
                        f"üîπ <b>–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö:</b> {malicious}\n"
                        f"üîπ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö:</b> {suspicious}\n"
                        f"üîπ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö:</b> {harmless}\n"
                        f"üîπ <b>–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:</b> {undetected}\n"
                        f"üîπ <b>–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤:</b> {total}\n"
                        f"üîπ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞:</b> {creation_date}\n\n"
                    )
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "VirusTotal",
                                url=f"https://www.virustotal.com/gui/domain/{domain}",
                            ),
                            InlineKeyboardButton(
                                "URLScan", url=f"https://urlscan.io/domain/{domain}"
                            ),
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_html(message, reply_markup=reply_markup)
                else:
                    logging.error(f"VirusTotal API error: {response.status}")
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–µ–Ω–∞: {response.status}"
                    )
    except asyncio.TimeoutError:
        logging.error(f"Timeout during domain check for user {update.effective_user.id}")
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error in domain check: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /url ‚Äì —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL —á–µ—Ä–µ–∑ VirusTotal (—Å –∫—Ä–∞—Ç–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º)."""
    if not await check_access(update):
        return
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL. –ü—Ä–∏–º–µ—Ä: /url https://example.com/page"
        )
        return
    
    url_to_check = context.args[0]  # –ù–µ —Å–∞–Ω–∏—Ç–∞—Ä–∏–∑—É–µ–º URL –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å
    if not validate_url(url_to_check):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://)."
        )
        return
    
    if not await rate_limit_check(update.effective_user.id, "url_check"):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        )
        return
        
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é URL: {url_to_check}...")
    try:
        api_url = "https://www.virustotal.com/api/v3/urls"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        data = {"url": url_to_check}
        
        timeout = aiohttp.ClientTimeout(total=60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è URL-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(api_url, headers=headers, data=data) as response:
                if response.status == 200:
                    response_json = await response.json()
                    analysis_id = response_json.get("data", {}).get("id", "")
                    # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)
                    await update.message.reply_text(
                        "‚è≥ URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑. –û–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
                    )
                    await asyncio.sleep(5)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    analysis_url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
                    async with session.get(analysis_url, headers=headers) as analysis_response:
                        if analysis_response.status == 200:
                            analysis_json = await analysis_response.json()
                            data = analysis_json.get("data", {}).get("attributes", {})
                            stats = data.get("stats", {})
                            malicious = stats.get("malicious", 0)
                            suspicious = stats.get("suspicious", 0)
                            harmless = stats.get("harmless", 0)
                            undetected = stats.get("undetected", 0)
                            total = malicious + suspicious + harmless + undetected
                            risk_score = (malicious + suspicious) / total * 100 if total > 0 else 0
                            risk_level = "–ù–∏–∑–∫–∏–π üü¢"
                            if risk_score > 50:
                                risk_level = "–í—ã—Å–æ–∫–∏–π üî¥"
                            elif risk_score > 20:
                                risk_level = "–°—Ä–µ–¥–Ω–∏–π üü†"
                            message = (
                                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ URL:</b>\n\n"
                                f"üîπ <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({risk_score:.1f}%)\n"
                                f"üîπ <b>–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö:</b> {malicious}\n"
                                f"üîπ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö:</b> {suspicious}\n"
                                f"üîπ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö:</b> {harmless}\n"
                                f"üîπ <b>–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:</b> {undetected}\n"
                                f"üîπ <b>–í—Å–µ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π:</b> {total}\n\n"
                            )
                            keyboard = [
                                [
                                    InlineKeyboardButton(
                                        "VirusTotal",
                                        url=f"https://www.virustotal.com/gui/url/{analysis_id}/detection",
                                    ),
                                    InlineKeyboardButton("URLScan", url="https://urlscan.io/"),
                                ]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            await update.message.reply_html(message, reply_markup=reply_markup)
                        else:
                            logging.error(f"VirusTotal analysis error: {analysis_response.status}")
                            await update.message.reply_text(
                                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis_response.status}"
                            )
                else:
                    logging.error(f"VirusTotal URL submit error: {response.status}")
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ URL –Ω–∞ –∞–Ω–∞–ª–∏–∑: {response.status}"
                    )
    except asyncio.TimeoutError:
        logging.error(f"Timeout during URL check for user {update.effective_user.id}")
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error in URL check: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /hash ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ VirusTotal."""
    if not await check_access(update):
        return
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö—ç—à —Ñ–∞–π–ª–∞ (MD5, SHA1 –∏–ª–∏ SHA256). –ü—Ä–∏–º–µ—Ä: /hash 44d88612fea8a8f36de82e1278abb02f"
        )
        return
    
    file_hash = sanitize_input(context.args[0]).lower()
    if not validate_hash(file_hash):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö—ç—à. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è MD5 (32 —Å–∏–º–≤–æ–ª–∞), SHA1 (40 —Å–∏–º–≤–æ–ª–æ–≤) –∏ SHA256 (64 —Å–∏–º–≤–æ–ª–∞)."
        )
        return
    
    if not await rate_limit_check(update.effective_user.id, "hash_check"):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        )
        return
        
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ö—ç—à: {file_hash}...")
    try:
        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data_json = await response.json()
                    data = data_json.get("data", {}).get("attributes", {})
                    stats = data.get("last_analysis_stats", {})
                    malicious = stats.get("malicious", 0)
                    suspicious = stats.get("suspicious", 0)
                    harmless = stats.get("harmless", 0)
                    undetected = stats.get("undetected", 0)
                    total = malicious + suspicious + harmless + undetected
                    risk_score = (malicious + suspicious) / total * 100 if total > 0 else 0
                    risk_level = "–ù–∏–∑–∫–∏–π üü¢"
                    if risk_score > 50:
                        risk_level = "–í—ã—Å–æ–∫–∏–π üî¥"
                    elif risk_score > 20:
                        risk_level = "–°—Ä–µ–¥–Ω–∏–π üü†"
                    message = (
                        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—ç—à–∞:</b>\n\n"
                        f"üîπ <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({risk_score:.1f}%)\n"
                        f"üîπ <b>–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö:</b> {malicious}\n"
                        f"üîπ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö:</b> {suspicious}\n"
                        f"üîπ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö:</b> {harmless}\n"
                        f"üîπ <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö:</b> {undetected}\n"
                        f"üîπ <b>–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤:</b> {total}\n\n"
                    )
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "VirusTotal",
                                url=f"https://www.virustotal.com/gui/file/{file_hash}/detection",
                            ),
                            InlineKeyboardButton(
                                "Hybrid Analysis",
                                url=f"https://www.hybrid-analysis.com/search?query={file_hash}",
                            ),
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_html(message, reply_markup=reply_markup)
                else:
                    logging.error(f"VirusTotal hash check error: {response.status}")
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö—ç—à–∞: {response.status}"
                    )
    except asyncio.TimeoutError:
        logging.error(f"Timeout during hash check for user {update.effective_user.id}")
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error in hash check: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def whois_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /whois ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ –∏–ª–∏ IP."""
    if not await check_access(update):
        return
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ IP-–∞–¥—Ä–µ—Å. –ü—Ä–∏–º–µ—Ä: /whois example.com"
        )
        return
    target = sanitize_input(context.args[0])
    await update.message.reply_text(f"üîç –ò—â—É WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è: {target}...")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º whois –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, whois.whois, target)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —Å—Ç—Ä–æ–∫–µ (—Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –æ–±—ä–µ–∫—Ç -> —Å—Ç—Ä–æ–∫–∞)
        info_text = ""
        if isinstance(result, dict):
            for key, value in result.items():
                info_text += f"{key}: {value}\n"
        else:
            info_text = str(result)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–æ –ª–∏–º–∏—Ç Telegram
        if len(info_text) > 4000:
            info_text = info_text[:4000] + "..."
        await update.message.reply_text(f"```{info_text}```", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"WHOIS lookup error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ WHOIS: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )

# ======= –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ MITRE ATT&CK =======

async def mitre_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mitre ‚Äì –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ MITRE ATT&CK –ø–æ ID –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
    if not await check_access(update):
        return
    mitre_data = await fetch_mitre_data()
    if not context.args:
        # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äì –≤—ã–≤–æ–¥–∏–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Ç–∏–∫–∞—Ö –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–µ—Ö–Ω–∏–∫
        message = "üõ°Ô∏è <b>MITRE ATT&CK Matrix ‚Äì –û–±–∑–æ—Ä</b>\n\n"
        message += "MITRE ATT&CK ‚Äì –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ —Ç–∞–∫—Ç–∏–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–∏–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏.\n\n"
        message += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏:</b>\n"
        for tactic in mitre_data["tactics"]:
            tid = tactic.get("id", "")
            name_en = tactic.get("name", "")
            name_ru = tactic.get("name_ru", "")
            if name_ru and name_ru != name_en:
                message += f"‚Ä¢ <code>{tid}</code>: {name_ru} ({name_en})\n"
            else:
                message += f"‚Ä¢ <code>{tid}</code>: {name_en}\n"
        message += f"\n<b>–í—Å–µ–≥–æ —Ç–µ—Ö–Ω–∏–∫:</b> {len(mitre_data['techniques'])}\n"
        message += f"<b>–í—Å–µ–≥–æ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫:</b> {len(mitre_data['subtechniques'])}\n\n"
        message += "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        message += "/mitre [ID –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ]\n\n"
        message += "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        message += "/mitre T1566 (–ø–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ ID)\n"
        message += "/mitre TA0001 (–ø–æ–∏—Å–∫ —Ç–∞–∫—Ç–∏–∫–∏ –ø–æ ID)\n"
        message += "/mitre —Ñ–∏—à–∏–Ω–≥ (–ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)\n"
        message += "/mitre lateral (–ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        await update.message.reply_html(message)
        return
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∑–∞–ø—Ä–æ—Å
    query = sanitize_input(" ".join(context.args)).lower()
    found_tactics = []
    found_techniques = []
    found_subtechniques = []
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö —Ç–∞–∫—Ç–∏–∫, —Ç–µ—Ö–Ω–∏–∫ –∏ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫
    for tactic in mitre_data["tactics"]:
        if (
            query in tactic.get("id", "").lower()
            or query in tactic.get("name", "").lower()
            or query in tactic.get("name_ru", "").lower()
            or query in tactic.get("description", "").lower()
        ):
            found_tactics.append(tactic)
    for tech in mitre_data["techniques"]:
        if (
            query in tech.get("id", "").lower()
            or query in tech.get("name", "").lower()
            or query in tech.get("name_ru", "").lower()
            or query in tech.get("description", "").lower()
        ):
            found_techniques.append(tech)
    for sub in mitre_data["subtechniques"]:
        if (
            query in sub.get("id", "").lower()
            or query in sub.get("name", "").lower()
            or query in sub.get("name_ru", "").lower()
            or query in sub.get("description", "").lower()
        ):
            found_subtechniques.append(sub)
    if not found_tactics and not found_techniques and not found_subtechniques:
        await update.message.reply_html(
            f"‚ö†Ô∏è –ü–æ –∑–∞–ø—Ä–æ—Å—É '<b>{query}</b>' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–∫–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω—ã–π ID (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    exact_type = None
    exact_item = None
    for tactic in found_tactics:
        if tactic.get("id", "").lower() == query:
            exact_type, exact_item = "tactic", tactic
            break
    if not exact_item:
        for tech in found_techniques:
            if tech.get("id", "").lower() == query:
                exact_type, exact_item = "technique", tech
                break
    if not exact_item:
        for sub in found_subtechniques:
            if sub.get("id", "").lower() == query:
                exact_type, exact_item = "subtechnique", sub
                break
    if exact_item:
        # –ï—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID ‚Äì –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if exact_type == "tactic":
            message = format_tactic_message(exact_item, mitre_data)
        else:
            message = format_technique_message(
                exact_item, mitre_data, is_subtechnique=(exact_type == "subtechnique")
            )
        # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã, —Ä–∞–∑–æ–±—å—ë–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(message) > 4000:
            parts = [message[i : i + 4000] for i in range(0, len(message), 4000)]
            for part in parts:
                await update.message.reply_html(part)
        else:
            await update.message.reply_html(message)
        return
    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_msg = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {query}\n\n"
    if found_tactics:
        result_msg += f"<b>üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–∫—Ç–∏–∫: {len(found_tactics)}</b>\n"
        for t in found_tactics[:3]:
            tid = t.get("id", "")
            name_en = t.get("name", "")
            name_ru = t.get("name_ru", "")
            if name_ru and name_ru != name_en:
                result_msg += f"‚Ä¢ <code>{tid}</code>: {name_ru} ({name_en})\n"
            else:
                result_msg += f"‚Ä¢ <code>{tid}</code>: {name_en}\n"
        if len(found_tactics) > 3:
            result_msg += f"... –∏ –µ—â–µ {len(found_tactics)-3} —Ç–∞–∫—Ç–∏–∫\n"
        result_msg += "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞–∫—Ç–∏–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–µ ID, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        result_msg += f"/mitre {found_tactics[0].get('id', '')}\n\n"
    if found_techniques:
        result_msg += f"<b>‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–∏–∫: {len(found_techniques)}</b>\n"
        for tech in found_techniques[:5]:
            tid = tech.get("id", "")
            name_en = tech.get("name", "")
            name_ru = tech.get("name_ru", "")
            if name_ru and name_ru != name_en:
                result_msg += f"‚Ä¢ <code>{tid}</code>: {name_ru} ({name_en})\n"
            else:
                result_msg += f"‚Ä¢ <code>{tid}</code>: {name_en}\n"
        if len(found_techniques) > 5:
            result_msg += f"... –∏ –µ—â–µ {len(found_techniques)-5} —Ç–µ—Ö–Ω–∏–∫\n"
        result_msg += "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ—Ö–Ω–∏–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–µ ID, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        result_msg += f"/mitre {found_techniques[0].get('id', '')}\n\n"
    if found_subtechniques:
        result_msg += f"<b>üîß –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫: {len(found_subtechniques)}</b>\n"
        for sub in found_subtechniques[:5]:
            sid = sub.get("id", "")
            name_en = sub.get("name", "")
            name_ru = sub.get("name_ru", "")
            if name_ru and name_ru != name_en:
                result_msg += f"‚Ä¢ <code>{sid}</code>: {name_ru} ({name_en})\n"
            else:
                result_msg += f"‚Ä¢ <code>{sid}</code>: {name_en}\n"
        if len(found_subtechniques) > 5:
            result_msg += f"... –∏ –µ—â–µ {len(found_subtechniques)-5} –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫\n"
        result_msg += "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–µ ID, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        result_msg += f"/mitre {found_subtechniques[0].get('id', '')}\n"
    await update.message.reply_html(result_msg)

def format_tactic_message(tactic: dict, mitre_data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏ MITRE ATT&CK."""
    tid = tactic.get("id", "")
    name_en = tactic.get("name", "")
    name_ru = tactic.get("name_ru", "")
    desc = tactic.get("description", "") or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ."
    msg = "<b>üéØ –¢–ê–ö–¢–ò–ö–ê MITRE ATT&CK</b>\n\n"
    if name_ru and name_ru != name_en:
        msg += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name_ru} ({name_en})\n"
    else:
        msg += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name_en}\n"
    msg += f"<b>ID:</b> <code>{tid}</code>\n\n"
    msg += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{desc}\n\n"
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (—Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–∫—Ç–∏–∫ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è)
    related_techniques = [
        tech
        for tech in mitre_data["techniques"]
        if tid.lower() in [t.lower() for t in tech.get("tactics", [])]
    ]
    msg += f"<b>–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ ({len(related_techniques)}):</b>\n"
    for tech in sorted(related_techniques, key=lambda x: x.get("id", ""))[:15]:
        t_id = tech.get("id", "")
        t_name = tech.get("name", "")
        t_name_ru = tech.get("name_ru", "")
        if t_name_ru and t_name_ru != t_name:
            msg += f"‚Ä¢ <code>{t_id}</code>: {t_name_ru} ({t_name})\n"
        else:
            msg += f"‚Ä¢ <code>{t_id}</code>: {t_name}\n"
    return msg

def format_technique_message(
    technique: dict, mitre_data: dict, is_subtechnique: bool = False
) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–ª–∏ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫–∏ MITRE ATT&CK."""
    tid = technique.get("id", "")
    name_en = technique.get("name", "")
    name_ru = technique.get("name_ru", "")
    desc = technique.get("description", "") or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ."
    parent_id = technique.get("parent", "") if is_subtechnique else None
    msg = (
        "<b>‚öôÔ∏è –¢–ï–•–ù–ò–ö–ê MITRE ATT&CK</b>\n\n"
        if not is_subtechnique
        else "<b>üîß –ü–û–î–¢–ï–•–ù–ò–ö–ê MITRE ATT&CK</b>\n\n"
    )
    if name_ru and name_ru != name_en:
        msg += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name_ru} ({name_en})\n"
    else:
        msg += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name_en}\n"
    msg += f"<b>ID:</b> <code>{tid}</code>\n"
    if parent_id:
        msg += f"<b>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:</b> {parent_id}\n"
    msg += f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{desc}\n\n"
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫—Ç–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ—Ö–Ω–∏–∫–∞
    tactics = technique.get("tactics", [])
    if tactics:
        msg += "<b>–¢–∞–∫—Ç–∏–∫–∏:</b> " + ", ".join(tactics) + "\n\n"
    # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫–æ–π, –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if not is_subtechnique:
        subtechs = [st for st in mitre_data["subtechniques"] if st.get("parent") == tid]
        if subtechs:
            msg += f"<b>–ü–æ–¥—Ç–µ—Ö–Ω–∏–∫–∏ ({len(subtechs)}):</b>\n"
            for st in sorted(subtechs, key=lambda x: x.get("id", ""))[:10]:
                st_id = st.get("id", "")
                st_name = st.get("name", "")
                st_name_ru = st.get("name_ru", "")
                if st_name_ru and st_name_ru != st_name:
                    msg += f"‚Ä¢ <code>{st_id}</code>: {st_name_ru} ({st_name})\n"
                else:
                    msg += f"‚Ä¢ <code>{st_id}</code>: {st_name}\n"
            if len(subtechs) > 10:
                msg += "... –∏ –¥—Ä—É–≥–∏–µ\n"
    return msg

# ======= –§—É–Ω–∫—Ü–∏–∏ –æ–±—É—á–∞—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (—Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã) =======

async def killchain_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ªe Cyber Kill Chain."""
    if not await check_access(update):
        return
    message = (
        "üéØ <b>–ú–æ–¥–µ–ª—å Cyber Kill Chain</b>\n\n"
        "1Ô∏è‚É£ <b>–†–∞–∑–≤–µ–¥–∫–∞ (Reconnaissance)</b>\n"
        "–ê—Ç–∞–∫—É—é—â–∏–π —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ ‚Äì –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–π, –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.\n\n"
        "2Ô∏è‚É£ <b>–í–æ–æ—Ä—É–∂–µ–Ω–∏–µ (Weaponization)</b>\n"
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–∞ –∏–ª–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û –¥–ª—è –∞—Ç–∞–∫–∏, —á–∞—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è—è —ç–∫—Å–ø–ª–æ–π—Ç —Å –±—ç–∫–¥–æ—Ä–æ–º.\n\n"
        "3Ô∏è‚É£ <b>–î–æ—Å—Ç–∞–≤–∫–∞ (Delivery)</b>\n"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∂–µ—Ä—Ç–≤–µ (—á–µ—Ä–µ–∑ email, USB –∏–ª–∏ –≤–µ–±-—Å–∞–π—Ç).\n\n"
        "4Ô∏è‚É£ <b>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (Exploitation)</b>\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ –∂–µ—Ä—Ç–≤—ã.\n\n"
        "5Ô∏è‚É£ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Installation)</b>\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ç–∫–¥–æ—Ä–∞) –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.\n\n"
        "6Ô∏è‚É£ <b>–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Command & Control)</b>\n"
        "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "7Ô∏è‚É£ <b>–î–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ü–µ–ª–∏ (Actions on Objectives)</b>\n"
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∞—Ç–∞–∫–∏ ‚Äì –∫—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ —Ç.–¥.\n\n"
        "<b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ SOC:</b> –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —ç—Ç–∞–ø, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∞—Ç–∞–∫–∞, –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è."
    )
    keyboard = [
        [
            InlineKeyboardButton(
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Kill Chain",
                url="https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html",
            )
        ]
    ]
    await update.message.reply_html(
        message, reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def owasp_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± OWASP Top 10."""
    if not await check_access(update):
        return
    message = (
        "üîê <b>OWASP Top 10 (2021)</b>\n\n"
        "–ù–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n\n"
        "1Ô∏è‚É£ <b>A01:2021 ‚Äì Broken Access Control (–ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞)</b>\n"
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∞—Ç–∞–∫—É—é—â–∏–º –æ–±—Ö–æ–¥–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "2Ô∏è‚É£ <b>A02:2021 ‚Äì Cryptographic Failures (–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏)</b>\n"
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "3Ô∏è‚É£ <b>A03:2021 ‚Äì Injection (–ò–Ω—ä–µ–∫—Ü–∏–∏)</b>\n"
        "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (SQL, NoSQL, OS Command –∏ —Ç.–¥.) –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä.\n\n"
        "4Ô∏è‚É£ <b>A04:2021 ‚Äì Insecure Design (–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω)</b>\n"
        "–ü—Ä–æ–±–µ–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "5Ô∏è‚É£ <b>A05:2021 ‚Äì Security Misconfiguration (–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)</b>\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
        "6Ô∏è‚É£ <b>A06:2021 ‚Äì Vulnerable and Outdated Components (–£—è–∑–≤–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)</b>\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫/–ø–∞–∫–µ—Ç–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏.\n\n"
        "7Ô∏è‚É£ <b>A07:2021 ‚Äì Identification and Authentication Failures (–û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)</b>\n"
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –æ–±—Ö–æ–¥–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π).\n\n"
        "8Ô∏è‚É£ <b>A08:2021 ‚Äì Software and Data Integrity Failures (–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ü–û –∏ –¥–∞–Ω–Ω—ã—Ö)</b>\n"
        "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫).\n\n"
        "9Ô∏è‚É£ <b>A09:2021 ‚Äì Security Logging and Monitoring Failures (–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)</b>\n"
        "–ù–µ—Ö–≤–∞—Ç–∫–∞ –∏–ª–∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —á—Ç–æ –º–µ—à–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –∞—Ç–∞–∫.\n\n"
        "üîü <b>A10:2021 ‚Äì Server-Side Request Forgery (SSRF)</b>\n"
        "–£—è–∑–≤–∏–º–æ—Å—Ç—å, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º (–≤–∫–ª—é—á–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ)."
    )
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ OWASP.org", url="https://owasp.org/Top10/")]
    ]
    await update.message.reply_html(
        message, reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def osi_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º–∏—É—Ä–æ–≤–Ω–µ–≤–æ–π –º–æ–¥–µ–ª–∏ OSI."""
    if not await check_access(update):
        return
    message = (
        "üìò <b>–ú–æ–¥–µ–ª—å OSI (Open Systems Interconnection)</b>\n\n"
        "–≠—Ç–∞–ª–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ç–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ 7 —É—Ä–æ–≤–Ω–µ–π:\n\n"
        "7Ô∏è‚É£ <b>–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–π (Application)</b> ‚Äì –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è (HTTP, FTP, SMTP –∏ –¥—Ä.)\n"
        "6Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (Presentation)</b> ‚Äì –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "5Ô∏è‚É£ <b>–°–µ–∞–Ω—Å–æ–≤—ã–π (Session)</b> ‚Äì —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞–º–∏ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞)\n"
        "4Ô∏è‚É£ <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π (Transport)</b> ‚Äì –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (TCP, UDP)\n"
        "3Ô∏è‚É£ <b>–°–µ—Ç–µ–≤–æ–π (Network)</b> ‚Äì –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ (IP)\n"
        "2Ô∏è‚É£ <b>–ö–∞–Ω–∞–ª—å–Ω—ã–π (Data Link)</b> ‚Äì –ø–µ—Ä–µ–¥–∞—á–∞ –∫–∞–¥—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ (Ethernet –∏ –¥—Ä.)\n"
        "1Ô∏è‚É£ <b>–§–∏–∑–∏—á–µ—Å–∫–∏–π (Physical)</b> ‚Äì —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—ã –ø–µ—Ä–µ–¥–∞—á–∏ (–∫–∞–±–µ–ª–∏, —Ä–∞–¥–∏–æ–≤–æ–ª–Ω—ã)\n\n"
        "<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ú–æ–¥–µ–ª—å OSI —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, —Ç–æ–≥–¥–∞ –∫–∞–∫ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å TCP/IP."
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ–ª—å TCP/IP
    keyboard = [
        [InlineKeyboardButton("–°–µ—Ç–µ–≤–∞—è –º–æ–¥–µ–ª—å TCP/IP", callback_data="show_tcpip")]
    ]
    await update.message.reply_html(
        message, reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def tcpip_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ TCP/IP."""
    if not await check_access(update):
        return
    message = (
        "üåê <b>–°–µ—Ç–µ–≤–∞—è –º–æ–¥–µ–ª—å TCP/IP</b>\n\n"
        "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–µ—Ç—ã—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –º–æ–¥–µ–ª—å, –ª–µ–≥—à–∞—è –≤ –æ—Å–Ω–æ–≤—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n"
        "4Ô∏è‚É£ <b>–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–π (Application)</b> ‚Äì –≤–∫–ª—é—á–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ 5-7 –º–æ–¥–µ–ª–∏ OSI (–ø—Ä–æ—Ç–æ–∫–æ–ª—ã: HTTP, SMTP, FTP –∏ –¥—Ä.)\n"
        "3Ô∏è‚É£ <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π (Transport)</b> ‚Äì –∞–Ω–∞–ª–æ–≥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è OSI (TCP, UDP)\n"
        "2Ô∏è‚É£ <b>–°–µ—Ç–µ–≤–æ–π (Internet)</b> ‚Äì –∞–Ω–∞–ª–æ–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è OSI (IP, ICMP)\n"
        "1Ô∏è‚É£ <b>–ö–∞–Ω–∞–ª—å–Ω—ã–π + –§–∏–∑–∏—á–µ—Å–∫–∏–π (Link)</b> ‚Äì –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É—Ä–æ–≤–Ω–∏ 1-2 OSI (Ethernet, Wi-Fi –∏ –ø—Ä.)\n\n"
        "<b>–û—Ç–ª–∏—á–∏—è –æ—Ç OSI:</b> –º–æ–¥–µ–ª—å TCP/IP –±–æ–ª–µ–µ –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ, —Ç–æ–≥–¥–∞ –∫–∞–∫ OSI ‚Äì —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤."
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ–ª—å OSI
    keyboard = [[InlineKeyboardButton("–ú–æ–¥–µ–ª—å OSI", callback_data="show_osi")]]
    await update.message.reply_html(
        message, reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ======= –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –±–æ—Ç–∞) =======

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–ê–¥–º–∏–Ω–∫–∞' ‚Äì –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞."""
    if not await check_access(update):
        return
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞–Ω–µ–ª–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    text = "üëÆ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
    text += "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    if ALLOWED_USERS:
        for uid in ALLOWED_USERS:
            text += f"‚Ä¢ {uid}\n"
    else:
        text += "‚Ä¢ (–Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
    text += "\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —É–¥–∞–ª–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user"
            )
        ]
    ]
    for uid in ALLOWED_USERS:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"–£–¥–∞–ª–∏—Ç—å {uid}", callback_data=f"admin_remove_user_{uid}"
                )
            ]
        )
    msg = await update.message.reply_html(
        text, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–Ω–µ–ª—å
    context.user_data["admin_msg_id"] = msg.message_id
    context.user_data["admin_chat_id"] = msg.chat_id

# ======= –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ =======

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –º–æ–¥–µ–ª–µ–π –∏ —Ç.–¥.)."""
    query = update.callback_query
    user_id = query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
    if user_id != OWNER_ID and user_id not in ALLOWED_USERS:
        await query.answer("‚õîÔ∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    await query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    data = query.data
    if data == "admin_add_user":
        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        if context.user_data.get("expecting_add", False):
            # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∂–¥–µ—Ç –≤–≤–æ–¥ ID, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            await query.answer(
                "‚ö†Ô∏è –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True
            )
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ ID
            context.user_data["expecting_add"] = True
            await query.message.reply_text(
                "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:"
            )
    elif data.startswith("admin_remove_user_"):
        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            remove_id = int(data.split("admin_remove_user_")[1])
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.", show_alert=True)
            return
        if remove_id in ALLOWED_USERS:
            ALLOWED_USERS.remove(remove_id)
            save_allowed_users()
            await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.", show_alert=False)
        else:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        text = "üëÆ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        text += "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        if ALLOWED_USERS:
            for uid in ALLOWED_USERS:
                text += f"‚Ä¢ {uid}\n"
        else:
            text += "‚Ä¢ (–Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
        text += "\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user"
                )
            ]
        ]
        for uid in ALLOWED_USERS:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"–£–¥–∞–ª–∏—Ç—å {uid}", callback_data=f"admin_remove_user_{uid}"
                    )
                ]
            )
        try:
            await query.edit_message_text(
                text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
    elif data.startswith("check_vt_"):
        # Inline-–∫–Ω–æ–ø–∫–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AbuseIPDB: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ VirusTotal
        target = data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º IP –∏–ª–∏ –¥–æ–º–µ–Ω
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, IP —ç—Ç–æ –∏–ª–∏ –¥–æ–º–µ–Ω, –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            ipaddress.ip_address(target)
            context.args = [target]
            await check_ip(update, context)
        except ValueError:
            context.args = [target]
            await check_domain(update, context)
    elif data == "show_osi":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª—å OSI
        await osi_model(update, context)
    elif data == "show_tcpip":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª—å TCP/IP
        await tcpip_model(update, context)

# ======= –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Reply-–∫–Ω–æ–ø–æ–∫) =======

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –ø–æ–¥–º–µ–Ω—é)."""
    if not await check_access(update):
        return
    text = update.message.text.strip().lower()
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "–Ω–∞–∑–∞–¥":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data.pop("expecting_add", None)
        context.user_data.pop("expecting_ip", None)
        context.user_data.pop("expecting_domain", None)
        context.user_data.pop("expecting_url", None)
        context.user_data.pop("expecting_hash", None)
        context.user_data.pop("expecting_whois", None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
        await start(update, context)
        return
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ ID (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ)
    if context.user_data.get("expecting_add"):
        # –í–≤–æ–¥ ID —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
        if update.effective_user.id != OWNER_ID:
            context.user_data["expecting_add"] = False
            return
        if not text.isdigit():
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            return
        new_id = int(text)
        if new_id == OWNER_ID:
            await update.message.reply_text(
                "–≠—Ç–æ—Ç ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
        elif new_id in ALLOWED_USERS:
            await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        else:
            ALLOWED_USERS.append(new_id)
            save_allowed_users()
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."
            )
            logging.info(f"Authorized new user {new_id}")
        context.user_data["expecting_add"] = False
        return
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IOC
    if context.user_data.get("expecting_ip"):
        context.user_data["expecting_ip"] = False
        ip_input = sanitize_input(text)
        if not validate_ip(ip_input):
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            context.user_data["expecting_ip"] = True
            return
        context.args = [ip_input]
        await check_ip(update, context)
        return
    if context.user_data.get("expecting_domain"):
        context.user_data["expecting_domain"] = False
        domain_input = sanitize_input(text).lower()
        if not validate_domain(domain_input):
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            context.user_data["expecting_domain"] = True
            return
        context.args = [domain_input]
        await check_domain(update, context)
        return
    if context.user_data.get("expecting_url"):
        context.user_data["expecting_url"] = False
        url_input = text.strip()
        if not validate_url(url_input):
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            context.user_data["expecting_url"] = True
            return
        context.args = [url_input]
        await check_url(update, context)
        return
    if context.user_data.get("expecting_hash"):
        context.user_data["expecting_hash"] = False
        hash_input = sanitize_input(text).lower()
        if not validate_hash(hash_input):
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö—ç—à. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è MD5, SHA1, SHA256. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            context.user_data["expecting_hash"] = True
            return
        context.args = [hash_input]
        await check_hash(update, context)
        return
    if context.user_data.get("expecting_whois"):
        context.user_data["expecting_whois"] = False
        whois_input = sanitize_input(text)
        context.args = [whois_input]
        await whois_lookup(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "–∞–Ω–∞–ª–∏–∑ ioc":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª "–ê–Ω–∞–ª–∏–∑ IOC" ‚Äì –≤—ã–≤–æ–¥–∏–º –ø–æ–¥–º–µ–Ω—é
        ioc_menu_buttons = [
            [KeyboardButton("IP"), KeyboardButton("Domain")],
            [KeyboardButton("URL"), KeyboardButton("Hash")],
            [KeyboardButton("Whois"), KeyboardButton("–ù–∞–∑–∞–¥")],
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(ioc_menu_buttons, resize_keyboard=True),
        )
        return
    elif text == "mitre att&ck":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª "MITRE ATT&CK" ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ–±–∑–æ—Ä —Ç–∞–∫—Ç–∏–∫)
        context.args = []
        await mitre_lookup(update, context)
        return
    elif text == "–æ–±—É—á–µ–Ω–∏–µ":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª "–û–±—É—á–µ–Ω–∏–µ" ‚Äì –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        edu_menu_buttons = [
            [KeyboardButton("Kill Chain"), KeyboardButton("OWASP Top 10")],
            [KeyboardButton("–ú–æ–¥–µ–ª—å OSI"), KeyboardButton("–ú–æ–¥–µ–ª—å TCP/IP")],
            [KeyboardButton("–ù–∞–∑–∞–¥")],
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(edu_menu_buttons, resize_keyboard=True),
        )
        return
    elif text == "–∞–¥–º–∏–Ω–∫–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ê–¥–º–∏–Ω–∫–∞" ‚Äì –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
        if update.effective_user.id == OWNER_ID:
            await admin_panel(update, context)
        else:
            await update.message.reply_text(
                "‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞."
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ IOC –ø–æ–¥–º–µ–Ω—é
    if text == "ip":
        context.user_data["expecting_ip"] = True
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8):"
        )
        return
    elif text == "domain":
        context.user_data["expecting_domain"] = True
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com):"
        )
        return
    elif text == "url":
        context.user_data["expecting_url"] = True
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com):"
        )
        return
    elif text == "hash":
        context.user_data["expecting_hash"] = True
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (MD5/SHA1/SHA256):"
        )
        return
    elif text == "whois":
        context.user_data["expecting_whois"] = True
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ IP –¥–ª—è WHOIS –∑–∞–ø—Ä–æ—Å–∞:"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ –ø–æ–¥–º–µ–Ω—é ("–û–±—É—á–µ–Ω–∏–µ")
    elif text == "kill chain":
        await killchain_info(update, context)
    elif text == "owasp top 10":
        await owasp_info(update, context)
    elif text == "–º–æ–¥–µ–ª—å osi":
        await osi_model(update, context)
    elif text == "–º–æ–¥–µ–ª—å tcp/ip":
        await tcpip_model(update, context)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

# ======= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =======

def main():
    global VIRUSTOTAL_API_KEY, ABUSEIPDB_API_KEY, TELEGRAM_TOKEN, OWNER_ID
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ SOC Telegram Bot...")
        config = setup_credentials()

        if not config:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã—Ö–æ–¥.")
            exit(1)

        required_keys = ['VIRUSTOTAL_API_KEY', 'ABUSEIPDB_API_KEY', 'TELEGRAM_TOKEN', 'OWNER_ID']
        missing_keys = [key for key in required_keys if key not in config]
        
        if missing_keys:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(missing_keys)}")
            exit(1)

        VIRUSTOTAL_API_KEY = config['VIRUSTOTAL_API_KEY']
        ABUSEIPDB_API_KEY = config['ABUSEIPDB_API_KEY']
        TELEGRAM_TOKEN = config['TELEGRAM_TOKEN']
        OWNER_ID = config['OWNER_ID']

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        try:
            application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            exit(1)
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("ip", check_ip))
        application.add_handler(CommandHandler("domain", check_domain))
        application.add_handler(CommandHandler("url", check_url))
        application.add_handler(CommandHandler("hash", check_hash))
        application.add_handler(CommandHandler("whois", whois_lookup))
        application.add_handler(CommandHandler("mitre", mitre_lookup))
        application.add_handler(CommandHandler("killchain", killchain_info))
        application.add_handler(CommandHandler("owasp", owasp_info))
        application.add_handler(CommandHandler("osi", osi_model))
        application.add_handler(CommandHandler("tcpip", tcpip_model))
        application.add_handler(CommandHandler("admin", admin_panel))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("üöÄ SOC Telegram Bot started successfully!")
        print("üìã Configuration loaded and bot is running securely!")
        print("Bot is running... Press Ctrl+C to stop")
        
        application.run_polling()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"Critical error in main: {e}")
        exit(1)

if __name__ == "__main__":
    main()
